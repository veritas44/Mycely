{
  "name": "telehash-js",
  "description": "An implementation of telehash in pure javascript",
  "homepage": "https://github.com/telehash/thjs",
  "version": "0.1.32",
  "keywords": [
    "telehash",
    "crypto",
    "p2p",
    "dht",
    "json",
    "mesh",
    "javascript",
    "browser"
  ],
  "main": "thjs.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/telehash/thjs.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/telehash/thjs/raw/master/LICENSE"
    }
  ],
  "author": {
    "name": "Jeremie Miller",
    "email": "jeremie@jabber.org",
    "url": "http://jeremie.com/"
  },
  "readme": "telehash implemented in pure javascript\n=======================================\n\nThis is now the core module to implement a [telehash](http://telehash.org) switch, other modules are required to enable it to support crypto and network interfaces.\n\nIf you're looking to use this in node or browserify, check out the npm [telehash](https://github.com/telehash/node-telehash) package (`npm install telehash`).  To see some example usage, try the [fieldtest](https://github.com/quartzjer/fieldtest) which works in node, browser, and as a chrome app.\n\n## Modules\n\nThe `telehash` package in npm bundles most of these, but here's a list of all of the modules and where they work (please update when creating any)\n\n* [seeds](https://github.com/telehash/telehash-seeds) - node, browser\n* [cs1a](https://github.com/telehash/telehash-cs1a) - node, browser\n* [cs2a](https://github.com/telehash/telehash-cs2a) - node, browser\n* [cs3a](https://github.com/telehash/telehash-cs3a) - node\n* [http](https://github.com/telehash/telehash-http) - node, browser\n* [webrtc](https://github.com/telehash/telehash-webrtc) - browser\n* [ipv4](https://github.com/telehash/telehash-ipv4) - node\n* [ipv6](https://github.com/telehash/telehash-ipv6) - node\n\n<a name=\"api\" />\n## Common API\n\nThis module exports one function called `switch` to create a new blank switch:\n\n```js\nvar thjs = require(\"telehash-js\");\nvar self = new thjs.switch();\n```\n\nThe [telehash](https://github.com/telehash/node-telehash) provides it's own environment-friendly startup/init wrappers, and once you have a running switch it exposes the following methods:\n\n* **self.listen(\"type\",cbListen)** - when a new incoming channel is requested for this type, pass it to `cbListen(err,packet,chan)`\n* **self.start(\"hashname\",\"type\",{args},cbStart)** - creates a new outgoing channel of this type, calls `cbStart(err,packet,chan)`, args should include `\"js\":{...}` and optional `\"body\":Buffer`.\n\nModules may extend this and provide additional API methods.\n\n## Low Level API\n\nA switch exposes the following core methods:\n\n* **self.make(cbDone,cbStep)** - creates a new hashname id, calls back `cbDone(err, id)` when finished, and the optional `cbStep()` to show progress for slow systems\n* **self.load({id})** - loads hashname from id in the format `{\"parts\":{...}, \"1a\":\"public base64\", \"1a_secret\":\"secret base64\"}`\n* **self.addSeed({seed})** - adds info for a seed in the json format\n* **self.online(cbOnline)** - turns this switch on, `cbOnline(err)`\n* **self.whois(hashname)** - returns a hashname object (mostly for internal use)\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/telehash/thjs/issues"
  },
  "_id": "telehash-js@0.1.32",
  "_from": "telehash-js@0.1.x"
}
